---
title: Math Is Eating the World—And Software Is the Accelerant
layout: default
date: 2025-02-21
keywords: math
published: true
mathjax: yes
---

I want to argue that math will increasingly permeate our world, that the software we write will become ever more mathematical, and that software itself is a unique accelerant in the same way calculus revolutionized math.

But first, a quick detour into theoretical physics. I think it’s an early template for how math will continue to shape so many other fields.

##### The Surprising Role of Math in 20th-Century Physics

It’s no secret that the fundamental laws of physics are expressed in mathematical terms, but the relationship is deeper than just that. Over the last century, there’s been a pattern in physics where new ideas emerge directly from math and only later find experimental backing. This flips the expected script of “experiment first, theory second.”

- **Special Relativity** is derived from the postulate that the speed of light in a vacuum is the same in all reference frames. Though there was experimental motivation, Einstein’s key insights came from thought experiments about moving observers and the invariance of light speed.
- **General Relativity** extended that approach by proposing the equivalence between being in an accelerated frame and experiencing gravity, again sparked by thought experiments long before final empirical confirmation.
- **Quantum Mechanics** can, in a simplified sense, be viewed as a new approach to probability—the familiar 1-norm for probabilities morphs into a 2-norm for wavefunctions in a Hilbert space. It’s a big leap that puts the math of complex vector spaces front and center.

In the latter half of the 20th century, the examples became even more striking:

- **Quantum Field Theory (QFT)** elegantly uses Lagrangian mechanics, an 18th-century mathematical framework, to describe fields and particles. 
- **Group Theory**, which studies symmetry in its most abstract form, turned out to be crucial in QFT. It led to the prediction of new particles (like the W and Z bosons) purely by insisting on certain symmetries—predictions that experiments confirmed years later.

Math doesn’t just describe physical reality—it often *predicts* it.

##### Computation as the Next Big Vector for Math

My thesis is that this incredible power of mathematical insight won’t stay locked inside theoretical physics. I believe computation is the tool that will carry math to nearly every domain, making it indispensable in ways we’re only starting to see.

Just like calculus revolutionized math by showing how local rates of change could yield global insights about shapes and motion, computation has the power to make local decisions at high speed or on large-scale data and apply them to real-world systems in real time. Computation translates local mathematical insight to more optimal global behavior.

**Large Language Models (LLMs)** are a great illustration. They’re based around using gradient descent, which is a local operation, to optimize a large model with respect to a loss function. I don’t think anyone predicted the degree to which such a relatively simple operation, applied using computation on a large scale has led to models that almost exhibit aspects of general intelligence. 

And it’s not just AI. Whenever mathematical models struggle to account for complexities or chaos in the real world, fast computation swoops in. Self-driving cars, for example, depend heavily on *control theory*, which essentially involves making locally optimal decisions many times a second to keep a car safely on the road. **Finite Element Analysis (FEA)** in mechanical engineering uses discretized math plus high-performance computing to simulate everything from bridges to jet engines. Fields like computational fluid dynamics, climate modeling, and genomics all rely on advanced math embedded in massive software frameworks.

##### What This Means for Software Engineers

I believe that this has key implications for the software industry. Roles that combine software development expertise with mathematical insight will become increasingly lucrative, while the rest of the industry faces commodification pressure. This is already reflected in the outsized demand for roles that require both math and software knowledge. Those who can code *and* handle advanced math in these domains tend to earn outsized compensation—Wall Street “quants,” machine learning researchers, top-tier data scientists, etc. What used to be “business intelligence” or “analytics” is now sophisticated machine learning, Bayesian modeling, and data engineering. Management consultants pioneered the idea of using analytical frameworks for big decisions; modern data science takes that to the next level with deeper math plus huge computation clusters.

Put simply, mathematical knowledge is becoming increasingly valuable, and software is the force multiplier. It takes abstract mathematical models—sometimes centuries old—and breathes them into real products and systems. Whether it’s a neural network sifting through text, a feedback loop keeping a car on the road, or an elaborate model guiding corporate strategy, the blend of math + software is becoming increasingly common and "unreasonably effective".

##### References
1. The 2-norm viewpoint is a simplified conceptual bridge between classical probability and the Hilbert space formalism of quantum mechanics.  
2. General Relativity, built on Riemannian geometry, is a pinnacle example of using local differential geometry to derive far-reaching conclusions about the cosmos.
